<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ClipXmlReader.ViewModel"
        xmlns:behaviors_local="clr-namespace:ClipXmlReader.Behaviors"
        xmlns:xmltree_local="clr-namespace:ClipXmlReader.ViewModel.Xml.TreeView"
        xmlns:xmldatagrid_local="clr-namespace:ClipXmlReader.ViewModel.Xml.DataGrid"
        xmlns:modellocal="clr-namespace:ClipXmlReader.Model.DataSet"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:refctrl="clr-namespace:ClipXmlReader.View" x:Name="XmlReaderMainWindow" x:Class="ClipXmlReader.View.MainWindow"
        Title="{Binding DialogTitle}" FontFamily="Meiryo UI"  Width="1448" Height="650"
        >


    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BoolVisibilityConverter" />
        <CollectionViewSource x:Key="RecipeItem"
                              Source="{Binding BindMeasItemList}" />


        <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="SnapsToDevicePixels" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="button1" CornerRadius="0" Background="{TemplateBinding Background}">
                            <Grid>
                                <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Window.DataContext>
        <local:MainWindowViewModel/>
    </Window.DataContext>


    <DockPanel FlowDirection="LeftToRight">
        <!-- Top Frame GUI-->

        <StackPanel VerticalAlignment="Top" DockPanel.Dock="Top" Margin="0,0,0,0" >
            <StackPanel Margin="0,0,0,0" Orientation="Horizontal" Grid.ColumnSpan="{Binding ColumnDefinitions.Count, ElementName=TopFramePanel}" 
				Visibility="{Binding IsVisibleUserRibbonMenu, Converter={StaticResource BoolVisibilityConverter}}">
            </StackPanel>
            <Grid x:Name="TopFramePanel_RecipeButton" Visibility="{Binding IsVisibleUserRibbonMenu, Converter={StaticResource BoolVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="315"/>
                    <ColumnDefinition Width="500"/>
                    <ColumnDefinition Width="189"/>
                    <ColumnDefinition Width="129"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="76"/>
                    <RowDefinition Height="20"/>
                </Grid.RowDefinitions>

                <Button Content="↑" Style="{StaticResource ButtonStyle}"  Grid.Row="1" Grid.Column="4" BorderThickness="0" Margin="0,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Right"
					Height="17" Width="14">
                    <Button.InputBindings>
                        <MouseBinding Command="{Binding CommandSwitchMenuPanel}" CommandParameter="{x:Static local:EMenuPanelStatus.MENUPANEL_SIMPLEMENU}" MouseAction="LeftClick" />
                    </Button.InputBindings>
                </Button>
                <TextBlock HorizontalAlignment="Center"  Grid.Row="1" TextWrapping="NoWrap"  Text="Recipe Information" FontSize="16" VerticalAlignment="Center"
					Visibility="{Binding IsVisibleUserRibbonMenu, Converter={StaticResource BoolVisibilityConverter}}" 
					Height="20" Margin="86,0,81,0" Width="148" />


                <Grid x:Name="UserRibbonRIBBONITEM_RECIPEInfo" RenderTransformOrigin="0,0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="208"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30" />
                    </Grid.RowDefinitions>
                    <TextBlock HorizontalAlignment="Left" Margin="0,0,0,0" TextWrapping="NoWrap" Text="Recipe Name" VerticalAlignment="Center" Height="15" Width="77"/>
                    <TextBlock HorizontalAlignment="Left" Margin="0,0,0,0" TextWrapping="NoWrap" Text="Update Date" VerticalAlignment="Center" Grid.Row="1" Height="15" Width="73" />
                    <TextBox x:Name="ui_recipename_textbox" Grid.Column="1" HorizontalAlignment="Left" Margin="5,7,0,7" TextWrapping="NoWrap" Text="{Binding RecipeName}" VerticalAlignment="Center" Width="203" />
                    <TextBlock HorizontalAlignment="Left" Margin="5,8,0,8" TextWrapping="NoWrap" Text="{Binding Header.UpdateDate}" VerticalAlignment="Center" Grid.Row="1" Grid.Column="1" Height="15" Width="203" />
                    <GridSplitter Grid.RowSpan="2" Grid.Column="0" HorizontalAlignment="Left" Height="60" Margin="0,0,0,0"  VerticalAlignment="Top" Width="1"  />
                </Grid>
                <TextBlock HorizontalAlignment="Center"  Grid.Row="1" Grid.Column="1" TextWrapping="NoWrap"  Text="File" FontSize="16" VerticalAlignment="Center" 
					Visibility="{Binding IsVisibleUserRibbonMenu, Converter={StaticResource BoolVisibilityConverter}}" Height="20" Width="26" Margin="0"/>
                <Grid x:Name="WorkspaceRibbonRIBBONITEM_WORKSPACE" Grid.Column="1" >
                    <Grid.FocusVisualStyle>
                        <Style/>
                    </Grid.FocusVisualStyle>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="93"/>
                        <ColumnDefinition Width="359"/>
                        <ColumnDefinition Width="47"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="37"/>
                        <RowDefinition Height="31" />
                    </Grid.RowDefinitions>
                    <TextBlock HorizontalAlignment="Left" Margin="0,11" TextWrapping="NoWrap" Text="Root Directory" VerticalAlignment="Center" Height="16" Width="84"/>
                    <TextBox Margin="0,11" TextWrapping="NoWrap" 
						Text="{Binding CurrentWorkspace, Mode=OneWay}" Grid.Column="1" IsReadOnly="True" />
                    <Button x:Name="ui_WorkspaceSWButton" Style="{StaticResource ButtonStyle}"  Content="..." Grid.Column="2" BorderThickness="0" Click="ui_WorkspaceSWButton_Click" Margin="10,11,7,11" RenderTransformOrigin="0.0,0.75" />
                    <ComboBox Margin="0,10,201,0" VerticalAlignment="Top"
						ItemsSource="{Binding CurrentDirFiles}"
						SelectedItem="{Binding CurrentDir, Mode=TwoWay}" Grid.Column="1" Grid.Row="1" Height="20"/>
                    <TextBlock Margin="0,13,9,3" TextWrapping="NoWrap" Text="File List" VerticalAlignment="Center" Height="16" Grid.Row="1"/>

                    <!--
                    <Button Content="CreateXml" HorizontalAlignment="Center" VerticalAlignment="Top" Grid.Column="1" Width="82" BorderThickness="0" Margin="323,11,83,0" Grid.Row="1">
                        <Button.InputBindings>
                            <MouseBinding MouseAction="LeftClick" Command="{Binding CommandMakeXmlTable}" />
                        </Button.InputBindings>
                    </Button>
                    -->
                    <Button x:Name="ui_button_saverecipexml" Style="{StaticResource ButtonStyle}" Content="Save" Grid.Column="1" BorderThickness="0" Margin="191,12,100,0" Grid.Row="1" Click="ui_button_saverecipexml_Click" Focusable="False" Height="16" VerticalAlignment="Top" />
                    <Button x:Name="ui_SaveAsButton" Style="{StaticResource ButtonStyle}" Content="Save As" Margin="273,12,18,0" VerticalAlignment="Top" Grid.Column="1" BorderThickness="0" Click="ui_SaveAsButton_Click" Grid.Row="1" Height="16" />
                </Grid>
                <CheckBox Content="Absolute Coordinate Mode" IsChecked="{Binding IsAbsoluteChecking, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="2" Margin="10,12,0,0" Checked="CheckBox_CheckingTrigger" Unchecked="CheckBox_CheckingTrigger" Height="16" VerticalAlignment="Top" />
                <TextBlock HorizontalAlignment="Center"  Grid.Row="1" Grid.Column="2" TextWrapping="NoWrap"  Text="Controls" FontSize="16" VerticalAlignment="Center"
					Visibility="{Binding IsVisibleUserRibbonMenu, Converter={StaticResource BoolVisibilityConverter}}" Height="20" Margin="0"/>
                <Button x:Name="ui_updatecoordinate_button" Style="{StaticResource ButtonStyle}" Content="Update Coordinate" HorizontalAlignment="Center" VerticalAlignment="Top" Grid.Column="2" Width="136" BorderThickness="0" Margin="10,46,43,0" Height="17" Click="ui_updatecoordinate_button_Click" />
                <TextBlock  Grid.Row="1" Grid.Column="3" TextWrapping="NoWrap"  Text="Origin Lists" FontSize="16" VerticalAlignment="Bottom"
                	Visibility="{Binding IsVisibleUserRibbonMenu, Converter={StaticResource BoolVisibilityConverter}}" Height="20" Margin="0,0,0,0" HorizontalAlignment="Center"/>
                <Button Style="{StaticResource ButtonStyle}" Content="Load" HorizontalAlignment="Center" Grid.Column="3" Width="50" BorderThickness="0" Margin="37,12,42,47" Click="LoadOriginLists_Click"  />
                <Button Style="{StaticResource ButtonStyle}" Content="Save" HorizontalAlignment="Center" VerticalAlignment="Top" Grid.Column="3" Width="50" BorderThickness="0" Margin="37,43,42,0" Height="17" Click="SaveOriginLists_Click"   />

            </Grid>

            <DockPanel>
                <Button Content="↓" Style="{StaticResource ButtonStyle}" Visibility="{Binding IsVisibleSimpleMenu, Converter={StaticResource BoolVisibilityConverter}}" Grid.Column="{Binding ColumnDefinitions.Count, ElementName=TopFramePanel}"  BorderThickness="0" Margin="0,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Right" DockPanel.Dock="Right" >
                    <Button.InputBindings>
                        <MouseBinding Command="{Binding CommandSwitchMenuPanel}" CommandParameter="{x:Static local:EMenuPanelStatus.MENUPANEL_RIBBON}" MouseAction="LeftClick"/>
                    </Button.InputBindings>
                </Button>
            </DockPanel>
            <!--
            <Grid x:Name="TopFramePanel_WorkspaceButton" Visibility="{Binding IsVisibleWorkspace}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding Width, ElementName=WorkspaceRibbonRIBBONITEM_WORKSPACE}"/>
                    <ColumnDefinition Width="0*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="76"/>
                    <RowDefinition Height="20"/>
                </Grid.RowDefinitions>

                <Button Content="↑" Grid.Row="1" Grid.Column="{Binding ColumnDefinitions.Count, ElementName=TopFramePanel_WorkspaceButton}" BorderThickness="0" Margin="0,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Right" RenderTransformOrigin="0.36,1.844" >
                    <Button.InputBindings>
                        <MouseBinding Command="{Binding CommandSwitchMenuPanel}" CommandParameter="{x:Static local:EMenuPanelStatus.MENUPANEL_SIMPLEMENU}" MouseAction="LeftClick" />
                    </Button.InputBindings>
                </Button>

                <Grid Margin="0,0,0,22" Grid.Column="0" Grid.Row="1" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="90*"/>
                        <RowDefinition Height="30*"/>
                    </Grid.RowDefinitions>
                </Grid>
            </Grid>
            -->
        </StackPanel>

        <WrapPanel Width="auto" Height="30" DockPanel.Dock="Top">
            <WrapPanel Visibility="{Binding IsHiddenUserRecipeItems, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}" Margin="5,0,0,0">
                <TextBlock Text="{Binding CurrentRecipeIndex}" FontSize="16" Margin="5,0,0,0"  />
                <TextBlock Text="{Binding CurrentRecipeItem}" FontSize="16" Margin="5,0,0,0"  Background="LightGreen" />
                <TextBlock Text="{Binding CurrentRecipeName}" FontSize="16" Margin="5,0,0,0" />
            </WrapPanel>

            <Button Content="→ Recipe Items" Visibility="{Binding IsHiddenUserRecipeItems, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}"  Command="{Binding CommandSwitchTablePanel}" CommandParameter="RecipeItems" Margin="10,0,0,0" />
            <Button Content="→ Regions" Visibility="{Binding IsHiddenUserRegions, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}" Command="{Binding CommandSwitchTablePanel}" CommandParameter="Regions" Margin="10,0,0,0" />
        </WrapPanel>

        <StackPanel Width="338"  Visibility="{Binding IsVisibleAppErrorText, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}">
            <WrapPanel Height="48">
                <TextBlock TextWrapping="Wrap" Text="{Binding ErrorText, Mode=OneWay}"/>
            </WrapPanel>
        </StackPanel>

        <ScrollViewer>

            <StackPanel Orientation="Vertical" Width="auto" Height="auto"  Visibility="{Binding IsVisibleRecipeItems, Converter={StaticResource BoolVisibilityConverter}}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <TextBlock Text="Recipe Items" DockPanel.Dock="Left" Margin="5,0,0,0" FontSize="16" />
                <Button Content="←" Command="{Binding CommandSwitchTablePanel}" CommandParameter="RecipeItems" Grid.Column="1" />
            </Grid>

                <StackPanel x:Name="ImageMenubar" Width="346" Orientation="Vertical">
                    <DataGrid x:Name="RecipeItemDataGrid"  ItemsSource="{Binding BindRecipeItem}" AutoGenerateColumns="False" FontSize="12"
						CanUserAddRows="False" Height="200"
						CanUserSortColumns="False" 
						SelectedCellsChanged="RecipeItemDataGrid_SelectedCellsChanged"                              
						MouseRightButtonDown="RecipeItemDataGrid_MouseRightButtonDown" Margin="0,0,0,0" MouseDown="RecipeItemDataGrid_MouseDown" >

<!--
                        <DataGrid.RowStyle>
                            <Style TargetType="DataGridRow">

                            </Style>
                        </DataGrid.RowStyle>
-->
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Index"  Binding="{Binding Index, Mode=OneTime}" Width="50" Visibility="{Binding RecipeItemsVisibility}"  IsReadOnly="true"  />
                            <DataGridComboBoxColumn Header="Item" Width="90" 
								ItemsSource="{Binding Mode=OneWay, Source={StaticResource RecipeItem}}"  
								DisplayMemberPath="ItemLabel"
								SelectedValuePath="ItemType" 
								SelectedValueBinding="{Binding ItemObject.ItemType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>


                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>

                            <DataGridTextColumn Header=""  Visibility="{Binding RecipeItemsVisibility}" IsReadOnly="True" CanUserResize="False" CanUserSort="False">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="{Binding WarningColorInList, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="ToolTip" Value="{Binding ErrorMessage}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>                           
                        </DataGrid.Columns>


                        <DataGrid.ItemContainerStyle>
                            <Style TargetType="{x:Type DataGridRow}">
                                <Style.Resources>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="RoyalBlue"/>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White"/>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="RoyalBlue"/>
                                </Style.Resources>
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu ItemsSource="{Binding BindRightClickMenu}" >
                                            <ContextMenu.ItemContainerStyle>
                                                <Style TargetType="{x:Type MenuItem}">
                                                    <Setter Property="Header" Value="{Binding HeaderName}" />
                                                    <Setter Property="Command" Value="{Binding RightClickEvent}" />
                                                    <Setter Property="CommandParameter" Value="{Binding RightClickParam}" />
                                                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                                    
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate>
                                                                        <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContextMenu.ItemContainerStyle>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGrid.ItemContainerStyle>
                    </DataGrid>


                    <StackPanel Orientation="Vertical" Visibility="{Binding IsVisibleErrorOfRecipes, Converter={StaticResource BoolVisibilityConverter}}">
                        <TextBlock Text="ERROR!" Foreground="Red" Background="Yellow" FontSize="16"/>
                        <TextBlock Text="{Binding ErrorRecipe}" Background="Yellow" TextWrapping="Wrap" />
                    </StackPanel>

                    <StackPanel  Orientation="Horizontal">
                        <TextBlock TextWrapping="Wrap" Text="Parameters" Margin="0,0,10,0" FontSize="16" />
                        
                        <!--
                        <Button Content="Create"  Style="{StaticResource ButtonStyle}" Margin="0,0,10,0" FontSize="14" Visibility="{Binding IsEmptyBindCoordinate, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}">
                            <Button.InputBindings>
                                <MouseBinding MouseAction="LeftClick" Command="{Binding CommandCreateTable}" CommandParameter="{Binding BindCoordinateList}" />
                            </Button.InputBindings>
                        </Button>
                        -->
                    </StackPanel>

                    <DataGrid x:Name="CoordinateDataGrid" ItemsSource="{Binding BindCoordinateList}" FontSize="12"
						AutoGenerateColumns="False"
						GridLinesVisibility="All"
						CanUserSortColumns="False"
                        HeadersVisibility="None">


                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding Name}"  Width="200" IsReadOnly="True">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Value"  Binding="{Binding Value}" Width="*">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>

                        <!--
                        <DataGrid.ItemContainerStyle>
                            <Style TargetType="{x:Type DataGridRow}">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu ItemsSource="{Binding BindRightClickMenu}" >
                                            <ContextMenu.ItemContainerStyle>
                                                <Style TargetType="{x:Type MenuItem}">
                                                    <Setter Property="Header" Value="{Binding HeaderName}" />
                                                    <Setter Property="Command" Value="{Binding RightClickEvent}" />
                                                    <Setter Property="CommandParameter" Value="{Binding RightClickParam}" />
                                                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate>
                                                                        <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContextMenu.ItemContainerStyle>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGrid.ItemContainerStyle>
                    -->

                    </DataGrid>

                    <StackPanel  Orientation="Horizontal">
                        <!--
                        <TextBlock TextWrapping="Wrap" Text="Output Parameter" Margin="0,0,10,0" FontSize="16" />
                        <Button Content="Create" Style="{StaticResource ButtonStyle}" Margin="0,0,10,0" FontSize="14" Visibility="{Binding IsEmptyBindParameter, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}" >
                            <Button.InputBindings>
                                <MouseBinding MouseAction="LeftClick" Command="{Binding CommandCreateTable}" CommandParameter="{Binding BindParameterObject}" />
                            </Button.InputBindings>
                        </Button>
                        -->
                    </StackPanel>
                    <DataGrid x:Name="ParameterDataGrid" ItemsSource="{Binding BindParameterObject}" FontSize="12"
						AutoGenerateColumns="False"
						GridLinesVisibility="All"
						CanUserSortColumns="False"
                        HeadersVisibility="None">


                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name"  Binding="{Binding Name}" Width="200" IsReadOnly="True">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Value" Binding="{Binding Value}" Width="*">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>

                        
                        <!--
                        <DataGrid.ItemContainerStyle>
                            <Style TargetType="{x:Type DataGridRow}">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu ItemsSource="{Binding BindRightClickMenu}" >
                                            <ContextMenu.ItemContainerStyle>
                                                <Style TargetType="{x:Type MenuItem}">
                                                    <Setter Property="Header" Value="{Binding HeaderName}" />
                                                    <Setter Property="Command" Value="{Binding RightClickEvent}" />
                                                    <Setter Property="CommandParameter" Value="{Binding RightClickParam}" />
                                                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate>
                                                                        <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContextMenu.ItemContainerStyle>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                        </DataGrid.ItemContainerStyle>
                                                -->
                    </DataGrid>

                    <StackPanel  Orientation="Horizontal">
                        <TextBlock TextWrapping="Wrap" Text="Results" Margin="0,0,10,0" FontSize="16" />
                        <!--
                        <Button Content="Create" Style="{StaticResource ButtonStyle}" Margin="0,0,10,0" FontSize="14" Visibility="{Binding IsEmptyBindResults, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}" >
                            <Button.InputBindings>
                                <MouseBinding MouseAction="LeftClick" Command="{Binding CommandCreateTable}" CommandParameter="{Binding BindResultsObject}" />
                            </Button.InputBindings>
                        </Button>
                        -->
                    </StackPanel>


                    <DataGrid x:Name="ResultsDataGrid" ItemsSource="{Binding BindResultsObject}" FontSize="12"
						AutoGenerateColumns="False"
						CanUserSortColumns="False">
                        <DataGrid.RowStyle>
                            <Style TargetType="DataGridRow">
                                <Style.Resources>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="RoyalBlue"/>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White"/>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="RoyalBlue"/>
                                </Style.Resources>
                            </Style>
                        </DataGrid.RowStyle>

                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name"  Binding="{Binding Name}" Width="70" IsReadOnly="true" />
                            <DataGridTextColumn Header="Unit" Binding="{Binding Unit}" Width="50"/>
                            <DataGridTextColumn Header="Digit" Binding="{Binding ValidFig}" Width="40"/>
                            <DataGridTextColumn Header="Lower" Binding="{Binding LowerBounds}" Width="70">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <DataGridTextColumn Header="Upper" Binding="{Binding UpperBounds}" Width="70">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <DataGridCheckBoxColumn Header="Use?" Binding="{Binding UseFlag}" Width="*">
                                <DataGridCheckBoxColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                                    </Style>
                                </DataGridCheckBoxColumn.CellStyle>
                            </DataGridCheckBoxColumn>
                        </DataGrid.Columns>

                        <!--
                        <DataGrid.ItemContainerStyle>
                            <Style TargetType="{x:Type DataGridRow}">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu ItemsSource="{Binding BindRightClickMenu}" >
                                            <ContextMenu.ItemContainerStyle>
                                                <Style TargetType="{x:Type MenuItem}">
                                                    <Setter Property="Header" Value="{Binding HeaderName}" />
                                                    <Setter Property="Command" Value="{Binding RightClickEvent}" />
                                                    <Setter Property="CommandParameter" Value="{Binding RightClickParam}" />
                                                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate>
                                                                        <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContextMenu.ItemContainerStyle>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGrid.ItemContainerStyle>
                        -->
                    </DataGrid>
                </StackPanel>
            </StackPanel>
        </ScrollViewer>

        <!-- 
        </Grid>
-->
        <!--
        <StackPanel Orientation="Vertical" Width="300" Visibility="{Binding IsVisibleRegions, Converter={StaticResource BoolVisibilityConverter}}">
            <DockPanel>
                <WrapPanel DockPanel.Dock="Right" FlowDirection="RightToLeft"/>
            </DockPanel>
        -->
        <Grid Visibility="{Binding IsVisibleRegions, Converter={StaticResource BoolVisibilityConverter}}">

            <Grid.RowDefinitions>
                <RowDefinition Height="20"/>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <TextBlock Text="Region" Margin="5,0,0,0" />
                <Button Content="←" Command="{Binding CommandSwitchTablePanel}" CommandParameter="Regions" Grid.Column="1" />
            </Grid>

            <TreeView x:Name="ui_regiontree" 
				ItemsSource="{Binding BindRegionTreeRoot}" ScrollViewer.VerticalScrollBarVisibility="Visible" Width="336"
                Grid.Row="1">

                <TreeView.Resources>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    </Style>
                </TreeView.Resources>

                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="ContextMenu">
                            <Setter.Value>
                                <ContextMenu ItemsSource="{Binding BindRightClickMenu}" >
                                    <ContextMenu.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}">
                                            <Setter Property="Header" Value="{Binding HeaderName}" />
                                            <Setter Property="Command" Value="{Binding RightClickEvent}" />
                                            <Setter Property="CommandParameter" Value="{Binding RightClickParam}" />
                                            <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate>
                                                                <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContextMenu.ItemContainerStyle>
                                </ContextMenu>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    </Style>
                </TreeView.ItemContainerStyle>

                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type xmltree_local:RegionTreeSource}" ItemsSource="{Binding Children}">
                        <WrapPanel>
                            <TextBox Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=Default}" 
                    			Visibility="{Binding IsVisibleTextBoxArrangeKey, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <!--  
                                                https://blog.okazuki.jp/entry/20110322/1300794263
                                                処理はInvokeが実行されたときにUpdateSourceを実行する単純な内容
                                                TextBoxのLostFocus Eventは文字列変更ではフォーカスアウトの処理が実行されない。
                                    -->
                                    <i:EventTrigger EventName="LostFocus">
                                        <behaviors_local:TextBoxUpdateSourceAction />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                            <TextBlock Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding IsVisibleTextBoxNormalKey, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}" />
                            <TextBlock Text="=" Visibility="{Binding IsVisibleEqualsMark, Converter={StaticResource BoolVisibilityConverter}}" />
                            <TextBox Text="{Binding Value}" 
                    			Visibility="{Binding IsVisibleTextBoxValue, Converter={StaticResource BoolVisibilityConverter}}" 
                    			GotFocus="TextBox_GotFocus"  />
                            <ComboBox Visibility="{Binding IsVisibleComboBoxValue, Converter={StaticResource BoolVisibilityConverter}, Mode=OneWay}" 
                    			ItemsSource="{Binding Sources}"
                    			DisplayMemberPath="ParameterLabel"
                    			SelectedValuePath="BindingParameterValue"                                               
                    			SelectedValue="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <TextBlock Text="{Binding Description}" />
                            <Button Content="Redo" Margin="5,0,0,0" Visibility="{Binding IsRedo, Converter={StaticResource BoolVisibilityConverter}}" />
                            <Ellipse Width="10" Height="10" Stroke="Black" Fill="{Binding MarkColor}" Visibility="{Binding IsVisibleCircleMark, Converter={StaticResource BoolVisibilityConverter}}" Margin="5,0,0,0" />
                        </WrapPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>

        </Grid>
        <!--
                        </StackPanel>
                    </StackPanel>
                    -->
        <!--
        </StackPanel>
        -->
        <refctrl:ImageViewerGui x:Name="ui_ImageViewerGui" Height="auto" Width="auto" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,0,0,0" DataContext="{Binding ViewModelImageViewerGui, Mode=TwoWay}" Loaded="ui_ImageViewerGui_Loaded" />
    </DockPanel>
</Window>
